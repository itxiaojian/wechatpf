<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" 
	xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

      	<property name="initialSize" value="${jdbc.initialSize}" />
      	<property name="minIdle" value="${jdbc.minIdle}" /> 
      	<property name="maxActive" value="${jdbc.maxActive}" />

      	<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
      	<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
      	
      	<property name="validationQuery" value="${jdbc.validationQuery}" />  
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />  
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />  
        <property name="testOnReturn" value="${jdbc.testOnReturn}" />  
        <property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />  
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
        <property name="logAbandoned" value="${jdbc.logAbandoned}" />
        
      	<property name="filters" value="${jdbc.filtes}" /> 
	</bean>
	
	<bean id="sequenceFactory" class="com.sliu.framework.app.common.dao.key.SequenceFactory">
		<property name="uniqueTableApp">
			<bean class="com.sliu.framework.app.common.dao.key.impl.DefaultUniqueTableApp">
		    	<constructor-arg index="0" ref="dataSource" />
		    </bean>
		</property>
		<property name="transactionTemplate" ref="transactionTemplate" />
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean" destroy-method="destroy">
		<property name="dataSource">
			<ref bean="dataSource"/>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.sliu</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.connection.release_mode">
					auto
				</prop>
				<prop key="hibernate.autoReconnect">true</prop>
				<prop key="hibernate.show_sql">false</prop>
				<!-- <prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.jdbc.fetch_size">32</prop>
				<prop key="hibernate.jdbc.batch_size">20</prop>
				<prop key="hibernate.max_fetch_depth">2</prop>
<!-- 				<prop key="hibernate.cache.provider_class">
					org.hibernate.cache.EhCacheProvider
				</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop> -->
			</props>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	    <bean class="com.sliu.framework.app.common.dao.jdbc.NamedParameterJdbcPager">
		<constructor-arg ref="dataSource" />
		<property name="builder">
			<!-- sql语句分页构造器：支持mysql和oralce -->
			<bean id="sqlBuilder" class="com.sliu.framework.app.common.dao.support.SqlBuilderFactoryBean" />
		</property>
	</bean>
    
    <!-- 对任何带有@Repository 注解的对象自动激活其数据访问异常转换 -->
    <bean id="persistenceManager" class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor">
    	<property name="proxyTargetClass" value="true" />
    </bean>
    
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
 		<property name="transactionManager" ref="transactionManager" />
 	</bean>

	<!-- 配置SqlSessionFactoryBean -->
    <!-- <bean id="mSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> -->
    <bean id="mySqlSessionFactory" class="com.likegene.framework.core.mybatis.RefreshableSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- mapper和resultmap配置路径 -->
<!--         <property name="mapperLocations" value="classpath:com/sliu/framework/app/sys/mapper/*.xml"/> -->
       <property name="mapperLocations" value="classpath:com/sliu/framework/app/*/mapper/*.xml"/>
    </bean>
    
    <!-- 通过扫描的模式，扫描目录在net/sf/ssi/mapper目录下，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" autowire="byName"> 
     	 <property name="sqlSessionFactoryBeanName" value="mySqlSessionFactory" />
     	<property name="basePackage" value="com.sliu.framework.app.*" />
     	
    </bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED"/>
            <tx:method name="complete*" propagation="REQUIRED"/>
             <tx:method name="new*" propagation="REQUIRED"/>
             <tx:method name="do*" propagation="REQUIRED"/>
             <tx:method name="change*" propagation="REQUIRED"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" isolation="READ_COMMITTED"/>
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* *..*BO.*(..))" />
	</aop:config>
</beans>